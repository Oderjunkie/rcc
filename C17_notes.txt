TIP FOR ME:
	To understand the C spec a little better. I have to read, read, read closely.

For conditional inclusion:
	The expression that controls conditional inclusion shall be an integer constant expression

	An integer constant expression shall have integer type and shall only have operands that are integer
	constants, enumeration constants, character constants, sizeof expressions whose results are integer
	constants, _Alignof expressions, and floating constants that are the immediate operands of casts.
	Cast operators in an integer constant expression shall only convert arithmetic types to integer types,
	except as part of an operand to the sizeof or _Alignof operator

source character set:
	A B C D E F G H I J K L M
	N O P Q R S T U V W X Y Z

	a b c d e f g h i j k l m
	n o p q r s t u v w x y z

	0 1 2 3 4 5 6 7 8 9

	! " # % & â€™ ( ) * + , - . / :
	; < = > ? [ \ ] ^ _ { | } ~
	the space character, and control characters representing horizontal tab, vertical tab, and form feed

	In a character constant or string literal, members of the execution character set shall be represented by
	corresponding members of the source character set or by escape sequences consisting of the backslash
	\ followed by one or more characters. A byte with all bits set to 0, called the null character, shall exist
	in the basic execution character set; it is used to terminate a character string.
	Identifiers can represent objects, functions, enums, labels, macro name, or macro parameter.
	The same identifiers can mean different things at different points in the program.

Identifiers can only be used within their scope.

There are four different types of scopes:
	function, file, block, and function prototype.

Different entities designated by the same identifier are either in different scopes or different
	namespaces.

Labels are the only identifiers that have function scope.
	They can be called anywhere from a 'goto' statement as long as that statement is
	within the same function as the label.

file scope terminates at the end of the translation unit.

If identifier doesn't appear in block or list of parameters, it has file scope.

If identifier appears in block or list of parameter declarations in a function definition,
	it has block scope which terminates at the end of the block.

If identifier appears in a list of parameter declarations in a function prototype,
	it has function prototype scope which terminates at the end of the function declarator.

There are five standard signed integer types, designated as
	signed char, short int, int, long int, and long long int

token:
	keyword
	identifier
	constant
	string-literal
	punctuator
preprocessing-token:
	header-name
	identifier
	pp-number
	character-constant
	string-literal
	punctuator
	each non-white-space character that cannot be one of the above

keyword: one of
	auto
	break
	case
	char
	const
	continue
	default
	do
	double
	else
	enum
	extern
	float
	for
	goto
	if
	inline
	int
	long
	register
	restrict
	return
	short
	signed
	sizeof
	static
	struct
	switch
	typedef
	union
	unsigned
	void
	volatile
	while
	_Alignas
	_Alignof
	_Atomic
	_Bool
	_Complex
	_Generic
	_Imaginary
	_Noreturn
	_Static_assert
	_Thread_local

identifier:
	identifier-nondigit
	identifier identifier-nondigit
	identifier digit
	identifier-nondigit:
	nondigit
	universal-character-name
	other implementation-defined characters
	nondigit: one of _ a b c d e f g h i j k l m
	n o p q r s t u v w x y z
	A B C D E F G H I J K L M
	N O P Q R S T U V W X Y Z
	digit: one of
	0 1 2 3 4 5 6 7 8 9

punctuator: one of
	[ ] ( ) { } . ->
	++ -- & * + - ~ !
	/ % << >> < > <= >= == != ^ | && ||
	? : ; ...
	= *= /= %= += -= <<= >>= &= ^= |=
	, # ##
	<: :> <% %> %: %:%:
